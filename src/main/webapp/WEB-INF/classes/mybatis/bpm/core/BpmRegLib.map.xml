<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.redxun.bpm.core.entity.BpmRegLib">
	<resultMap id="BpmRegLib" type="com.redxun.bpm.core.entity.BpmRegLib">
		<id property="regId" column="REG_ID_" jdbcType="VARCHAR"/>
		<result property="userId" column="USER_ID_" jdbcType="VARCHAR"/>
		<result property="regText" column="REG_TEXT_" jdbcType="VARCHAR"/>
		<result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR"/>
		<result property="createBy" column="CREATE_BY_" jdbcType="VARCHAR"/>
		<result property="createTime" column="CREATE_TIME_" jdbcType="DATE"/>
		<result property="updateBy" column="UPDATE_BY_" jdbcType="VARCHAR"/>
		<result property="updateTime" column="UPDATE_TIME_" jdbcType="DATE"/>
		<result property="name" column="NAME_" jdbcType="VARCHAR"/>
		<result property="type" column="TYPE_" jdbcType="VARCHAR"/>
		<result property="key" column="KEY_" jdbcType="VARCHAR"/>
		<result property="mentText" column="MENT_TEXT_" jdbcType="VARCHAR"/>
	</resultMap>
	
	<insert id="create" parameterType="com.redxun.bpm.core.entity.BpmRegLib">
		INSERT INTO BPM_REG_LIB
		(REG_ID_,USER_ID_,REG_TEXT_,TENANT_ID_,CREATE_BY_,CREATE_TIME_,UPDATE_BY_,UPDATE_TIME_,NAME_,TYPE_,KEY_,MENT_TEXT_)
		VALUES 
		(#{regId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{regText,jdbcType=VARCHAR}, #{tenantId,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=DATE}, #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=DATE}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{key,jdbcType=VARCHAR},#{mentText,jdbcType=VARCHAR})
	</insert>
	
	<select id="get"   parameterType="java.lang.String" resultMap="BpmRegLib">
		SELECT * FROM BPM_REG_LIB 
		WHERE 
		REG_ID_=#{regId}
	</select>
	
	<select id="query" parameterType="java.util.Map" resultMap="BpmRegLib">
		SELECT * FROM BPM_REG_LIB
		<where>
			<if test="@Ognl@isNotEmpty(whereSql)">
				${whereSql}
			</if>
		</where>
		<if test="@Ognl@isNotEmpty(orderBySql)">
			ORDER BY ${orderBySql}
		</if>
		<if test="@Ognl@isEmpty(orderBySql)">
			ORDER BY REG_ID_ DESC
		</if>
	</select>
	
	<update id="update" parameterType="com.redxun.bpm.core.entity.BpmRegLib">
		UPDATE BPM_REG_LIB SET
		USER_ID_=#{userId,jdbcType=VARCHAR},
		REG_TEXT_=#{regText,jdbcType=VARCHAR},
		TENANT_ID_=#{tenantId,jdbcType=VARCHAR},
		CREATE_BY_=#{createBy,jdbcType=VARCHAR},
		CREATE_TIME_=#{createTime,jdbcType=DATE},
		UPDATE_BY_=#{updateBy,jdbcType=VARCHAR},
		UPDATE_TIME_=#{updateTime,jdbcType=DATE},
		NAME_=#{name,jdbcType=VARCHAR},
		TYPE_=#{type,jdbcType=VARCHAR},
		KEY_=#{key,jdbcType=VARCHAR},
		MENT_TEXT_=#{mentText,jdbcType=VARCHAR}
		WHERE
		REG_ID_=#{regId}
	</update>
	
	<delete id="remove" parameterType="java.lang.String">
		DELETE FROM BPM_REG_LIB 
		WHERE
		REG_ID_=#{regId}
	</delete>
	
	<select id="getRegByType" parameterType="java.lang.String" resultMap="BpmRegLib">
		SELECT * FROM BPM_REG_LIB
		WHERE TYPE_ = #{type}
	</select>
	
	<select id="getRegByKey" parameterType="java.util.Map" resultMap="BpmRegLib">
		SELECT * FROM BPM_REG_LIB
		WHERE KEY_ = #{key,jdbcType=VARCHAR}
	</select>
	
	<select id="getCountByKey" resultType="java.lang.Integer">
		SELECT count(*)  FROM BPM_REG_LIB 
		WHERE  KEY_=#{key}
		<if test="@Ognl@isNotEmpty(id)">
			and REG_ID_!=#{id}
		</if>
	</select>
	
</mapper>